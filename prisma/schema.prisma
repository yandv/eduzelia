// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgres"
  url      = env("DATABASE_URL")
}

model Teacher {
  id String @id @default(cuid())

  email String @unique

  firstName String
  lastName  String

  password String

  subjects Subject[]
  sessions Session[]

  @@map("teachers")
}

model Student {
  id String @id @default(cuid())

  firstName String
  lastName  String
  birthDate DateTime

  studentSchoolClass StudentSchoolClass[]
  Grade              Grade[]

  @@map("students")
}

model StudentSchoolClass {
  id String @id @default(cuid())

  studentId     String
  schoolClassId String

  grades      Grade[]
  frequencies Frequency[]

  student     Student     @relation(fields: [studentId], references: [id])
  schoolClass SchoolClass @relation(fields: [schoolClassId], references: [id])

  @@unique([studentId, schoolClassId])
  @@map("student_classes")
}

model Subject {
  id String @id @default(cuid())

  name String

  schoolClasses SchoolClass[]
  teachers      Teacher[]

  @@map("subjects")
}

model SchoolClass {
  id String @id @default(cuid())

  name      String
  year      Int
  subjectId String

  sessions             Session[]
  studentSchoolClasses StudentSchoolClass[]
  subject              Subject              @relation(fields: [subjectId], references: [id])

  @@unique([name, year])
  @@map("school_classes")
}

model Session {
  id String @id @default(cuid())

  date          DateTime @unique
  description   String   @db.VarChar(2048)
  schoolClassId String
  teacherId     String

  schoolClass SchoolClass @relation(fields: [schoolClassId], references: [id])
  teacher     Teacher     @relation(fields: [teacherId], references: [id])
  frequencies Frequency[]

  @@unique([date, schoolClassId, teacherId])
  @@map("aula")
}

model Grade {
  id String @id @default(cuid())

  value Float
  index Int

  studentId     String
  schoolClassId String

  student            Student            @relation(fields: [studentId], references: [id])
  studentSchoolClass StudentSchoolClass @relation(fields: [schoolClassId], references: [id])

  @@unique([index, studentId, schoolClassId])
  @@map("grades")
}

model Frequency {
  id String @id @default(cuid())

  presente Boolean

  sessionId            String
  studentSchoolClassId String

  session            Session            @relation(fields: [sessionId], references: [id])
  studentSchoolClass StudentSchoolClass @relation(fields: [studentSchoolClassId], references: [id])

  @@unique([sessionId, studentSchoolClassId])
  @@map("frequencia")
}
